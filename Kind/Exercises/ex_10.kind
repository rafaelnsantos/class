//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool
  U16.gte(x, 65) && U16.lte(x, 90)

//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
  U16.gte(x, 97) && U16.lte(x, 122)

//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
  U16.gte(x, 48) && U16.lte(x, 57)


//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  U16.eql(x, y)



//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
  case is_digit(x) {
    false: 0
    true: U16.to_nat(U16.sub(x, 48))
  }


//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b' + 32
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case is_upper(x) {
    false: x
    true: U16.add(x, 32)
  }



//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B' - 32
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case is_lower(x) {
    false: x
    true: U16.sub(x, 32)
  }





//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
a: String
  "HI"

b: String
  "Hello"

c: String
  "text"
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  xs | ys



//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
  case xs {
    nil: ""
    cons: case n {
      zero: xs
      succ: drop(n.pred, xs.tail)
    }
  }

//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
  case xs {
    nil: ""
    cons: case n {
      zero: ""
      succ: String.cons(xs.head, take(n.pred, xs.tail))
    }
  }


//Takes a x part of the string after an n Index of values get dropped

//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll" Hello
//slice(1, 2, c) -> "ex" text
slice(n: Nat, x: Nat, xs: String): String
  take(x, drop(n, xs))


//Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs {
    nil: ""
    cons: case cond(xs.head) {
      true: String.cons(xs.head, filter(cond, xs.tail))
      false: filter(cond, xs.tail)
    }
  }

//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs {
    nil: ""
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }




//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  map(to_upper, xs)



//Convers the String into bits

//to_bits(a) -> "00000000010010010000000001001000"
//to_bits(b) -> "00000000011011110000000001101100000000000110110000000000011001010000000001001000"
//to_bits(c) -> "0000000001110100000000000111100000000000011001010000000001110100"
to_bits(xs: String): Bits
  case xs {
    nil: Bits.e
    cons: Bits.concat(U16.to_bits(xs.head), to_bits(xs.tail))
  }

//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false

stringequal(xs: String, ys: String): Bool
  case xs ys {
    nil nil: true
    cons cons: case U16.eql(xs.head, ys.head) {
      true: stringequal(xs.tail, ys.tail)
      false: false
    }
  } default false

//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs {
    nil: false
    cons: case xs.tail {
      nil: true
      cons: is_digit(xs.head) && is_nat(xs.tail)
    }
  }

string_length(xs: String): Nat
  case xs {
    nil: 0
    cons: Nat.succ(string_length(xs.tail))
  }

// Divides the elements of a String into a list, using a match you decide
split.go(xs: String, match: String, acum: String, acum2: List<String>): List<String>
  let matchLength = string_length(match)
  case xs {
    nil: List.append<String>(acum2, acum)
    cons: case stringequal(take(matchLength, xs), match) {
      true: 
        // let acum2 = if stringequal(acum, "") then acum2 else List.append<String>(acum2, acum)
        split.go(drop(matchLength, xs), match, "", List.append<String>(acum2, acum))
      false: 
        split.go(xs.tail, match, String.append(acum, xs.head), acum2)
    }
  }

replace(remove: String, add: String, str: String): String
  join(add, split(str, remove))

// ex_10: _
// split(b, "ll") //-> ["He","" , "o"
// split(c, "te") // -> ["t", "xt"]

split(xs: String, match: String): List<String>
  split.go(xs, match, "", [])



// Takes any elements of a list while the condition is matched

//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"
take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil: ""
    cons: case cond(xs.head) {
      true: String.cons(xs.head, take_while(cond, xs.tail))
      false: ""
    }
  }



//Finds the index of the head for the first occurence if any of the Characters are equal


//find(a, "H") -> 0
//find(b, "l") -> 2
//find(c, "x") -> 2
find.go(xs: String, x: Char, acum: Nat): Maybe<Nat>
  case xs {
    nil: Maybe.none<Nat>
    cons: case equal(xs.head, x) {
      true: some(acum)
      false: find.go(xs.tail, x, Nat.succ(acum))
    }
  }

find(xs: String, x: Char): Maybe<Nat>
  find.go(xs, x, 0)

//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
  case lxs {
    nil: ""
    cons: concat(lxs.head, flatten(lxs.tail))
  }

join(sep: String, lxs: List<String>): String
  case lxs {
    nil: ""
    cons: case lxs.tail {
      nil: lxs.head
      cons: concat(concat(lxs.head, sep), join(sep, lxs.tail))
    }
  }


ex_10: IO<Unit>
  IO {
    Tests._10.is_upper(is_upper)
    Tests._10.is_lower(is_lower)
    Tests._10.is_digit(is_digit)
    Tests._10.equal(equal)
    Tests._10.to_digit(to_digit)
    Tests._10.to_lower(to_lower)
    Tests._10.to_upper(to_upper)
    Tests._10.concat(concat)
    Tests._10.drop(drop)
    Tests._10.take(take)
    Tests._10.slice(slice)
    Tests._10.filter(filter)
    Tests._10.map(map)
    Tests._10.string_to_upper(string_to_upper)
    Tests._10.to_bits(to_bits)
    Tests._10.stringequal(stringequal)
    Tests._10.is_nat(is_nat)
    Tests._10.take_while(take_while)
    Tests._10.find(find)
    Tests._10.flatten(flatten)
  }
e1: Bits
  Bits.i(Bits.e)

e11: Bits
  Bits.i(Bits.i(Bits.e))

e110: Bits
  Bits.o(Bits.i(Bits.i(Bits.e)))

e100: Bits
  Bits.o(Bits.o(Bits.i(Bits.e)))

e1100: Bits
  Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))

e1111: Bits
  Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

e1000: Bits
  Bits.o(Bits.o(Bits.o(Bits.i(Bits.e))))
  
e1010: Bits
  Bits.o(Bits.i(Bits.o(Bits.i(Bits.e))))
  
e1001: Bits
  Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
  
e111: Bits
  Bits.i(Bits.i(Bits.i(Bits.e)))

e: Bits
  Bits.e

e10: Bits
  Bits.o(Bits.i(Bits.e))

e00: Bits
  Bits.o(Bits.o(Bits.e))
e01: Bits
  Bits.i(Bits.o(Bits.e))

e0011: Bits
  Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))

e11011: Bits
  Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))


Tests._07.is_empty(is_empty: Bits -> Bool): IO<Unit>
  IO {
    Assert.bool("is empty 11", is_empty(e11), false)
    Assert.bool("is empty 110", is_empty(e110), false)
    Assert.bool("is empty 1100", is_empty(e1100), false)
    Assert.bool("is empty 1111", is_empty(e1111), false)
    Assert.bool("is empty e", is_empty(e), true)
  }

Tests._07.tail(tail: Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("tail 11", tail(e11), e1)
    Assert.bits("tail 110", tail(e110), e11)
    Assert.bits("tail 1100", tail(e1100), e110)
    Assert.bits("tail 1111", tail(e1111), e111)
  }

Tests._07.not(nott: Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("not 11", nott(e11), e00)
    Assert.bits("not 1100", nott(e1100), e0011)
  }

Tests._07.inc(inc: Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("inc 10", inc(e10), e11)
    Assert.bits("inc 111", inc(e111), e1000)
    Assert.bits("inc 1000", inc(e1000), e1001)
  }

Tests._07.dec(dec: Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("dec 11", dec(e11), e10)
    Assert.bits("dec 1000", dec(e1000), e111)
    Assert.bits("dec 1001", dec(e1001), e1000)
  }

Tests._07.concat(concat: Bits -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("concat 11 11", concat(e11, e11), e1111)
    Assert.bits("concat 1 1", concat(e1, e1), e11)
    Assert.bits("concat 10 10", concat(e10, e10), e1010)
    Assert.bits("concat 11 110", concat(e11, e110), e11011)
  }


Tests._07.add(add: Bits -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("add 10 10", add(e10, e10), e100)
    Assert.bits("add 10 1", add(e10, e1), e11)
    Assert.bits("add 111 1", add(e111, e1), e1000)
  }

Tests._07.and(and: Bits -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("and 11 11", and(e11, e11), e11)
    Assert.bits("and 11 1", and(e11, e110), e10)
    Assert.bits("and 10 10", and(e10, e10), e10)
  }


Tests._07.eql(eql: Bits -> Bits -> Bool): IO<Unit>
  IO {
    Assert.bool("eql 11 11", eql(e11, e11), true)
    Assert.bool("eql 11 1", eql(e11, e110), false)
    Assert.bool("eql 10 10", eql(e10, e10), true)
  }


Tests._07.reverse(reverse: Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("reverse 11", reverse(e11), e11)
    Assert.bits("reverse 10", reverse(e10), e01)
  }


Tests._07.length(length: Bits -> Nat): IO<Unit>
  IO {
    Assert.nat("length 11", length(e11), 2)
    Assert.nat("length 1000", length(e1000), 4)
    Assert.nat("length 111", length(e111), 3)
  }

Tests._07.mul(mul: Bits -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("mul 100 10", mul(e100, e10), e1000)
    Assert.bits("mul 100 1", mul(e100, e1), e100)
    Assert.bits("mul 100 0", mul(e100, e), e)
  }


Tests._07.drop(drop: Nat -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("drop 1 11", drop(1, e11), e1)
    Assert.bits("drop 1 1100", drop(1, e1100), e110)
    Assert.bits("drop 1 111", drop(1, e111), e11)
    Assert.bits("drop 1 110", drop(1, e110), e11)
    Assert.bits("drop 2 111", drop(2, e111), e1)
    Assert.bits("drop 1 1001", drop(1, e1001), e100)
  }


Tests._07.take(take: Nat -> Bits -> Bits): IO<Unit>
  IO {
    Assert.bits("take 3 1100", take(3, e1100), e100)
    Assert.bits("take 3 1001", take(1, e1001), e1)
  }

Tests._10.is_upper(is_upper: Char -> Bool): IO<Unit>
  IO {
    Assert.bool("is_upper a", is_upper('a'), false)
    Assert.bool("is_upper A", is_upper('A'), true)
    Assert.bool("is_upper 0", is_upper('0'), false)
    IO.print("is_upper: All terms tested")
  }

Tests._10.is_lower(is_lower: Char -> Bool): IO<Unit>
  IO {
    Assert.bool("is_lower a", is_lower('a'), true)
    Assert.bool("is_lower A", is_lower('A'), false)
    Assert.bool("is_lower 0", is_lower('0'), false)
    IO.print("is_lower: All terms tested")
  }

Tests._10.is_digit(is_digit: Char -> Bool): IO<Unit>
  IO {
    Assert.bool("is_digit a", is_digit('a'), false)
    Assert.bool("is_digit A", is_digit('A'), false)
    Assert.bool("is_digit 0", is_digit('0'), true)
    IO.print("is_digit: All terms tested")
  }

Tests._10.equal(equal: Char -> Char -> Bool): IO<Unit>
  IO {
    Assert.bool("equal a A", equal('a', 'A'), false)
    Assert.bool("equal A 0", equal('A', '0'), false)
    Assert.bool("equal 0 0", equal('0', '0'), true)
    IO.print("equal: All terms tested")
  }

Tests._10.to_digit(to_digit: Char -> Nat): IO<Unit>
  IO {
    Assert.nat("to_digit 0", to_digit('0'), 0)
    Assert.nat("to_digit 1", to_digit('1'), 1)
    Assert.nat("to_digit 4", to_digit('4'), 4)
    IO.print("to_digit: All terms tested")
  }

Tests._10.to_lower(to_lower: Char -> Char): IO<Unit>
  IO {
    Assert.char("to_lower A", to_lower('A'), 'a')
    Assert.char("to_lower B", to_lower('B'), 'b')
    Assert.char("to_lower Z", to_lower('Z'), 'z')
    Assert.char("to_lower z", to_lower('z'), 'z')
    IO.print("to_lower: All terms tested")
  }

Tests._10.to_upper(to_upper: Char -> Char): IO<Unit>
  IO {
    Assert.char("to_upper a", to_upper('a'), 'A')
    Assert.char("to_upper b", to_upper('b'), 'B')
    Assert.char("to_upper z", to_upper('z'), 'Z')
    Assert.char("to_upper Z", to_upper('Z'), 'Z')
    IO.print("to_upper: All terms tested")
  }

a: String
  "HI"

b: String
  "Hello"

c: String
  "text"

Tests._10.concat(concat: String -> String -> String): IO<Unit>
  IO {
    Assert.string("concat a b", concat(a, b), "HIHello")
    Assert.string("concat b c", concat(b, c), "Hellotext")
    Assert.string("concat a c", concat(a, c), "HItext")
    IO.print("concat: All terms tested")
  }

Tests._10.drop(drop: Nat -> String -> String): IO<Unit>
  IO {
    Assert.string("drop 1 a", drop(1, a), "I")
    Assert.string("drop 2 b", drop(2, b), "llo")
    Assert.string("drop 3 c", drop(3, c), "t")
    IO.print("drop: All terms tested")
  }


Tests._10.take(take: Nat -> String -> String): IO<Unit>
  IO {
    Assert.string("take 1 a", take(1, a), "H")
    Assert.string("take 2 b", take(2, b), "He")
    Assert.string("take 3 c", take(3, c), "tex")
    IO.print("take: All terms tested")
  }


Tests._10.slice(slice: Nat -> Nat -> String -> String): IO<Unit>
  IO {
    Assert.string("slice 1 2 a", slice(1, 2, a), "I")
    Assert.string("slice 2 4 b", slice(2, 4, b), "llo")
    Assert.string("slice 1 2 c", slice(1, 2, c), "ex")
    IO.print("slice: All terms tested")
  }

Tests._10.filter(filter: (Char -> Bool) -> String -> String): IO<Unit>
  IO {
    Assert.string("filter is_upper a", filter(Char.is_upper, a), "HI")
    Assert.string("filter is_digit as334fs", filter(Char.is_digit, "as334fs"), "334")
    IO.print("filter: All terms tested")
  }

Tests._10.map(map: (Char -> Char) -> String -> String): IO<Unit>
  IO {
    Assert.string("map to_lower a", map(Char.to_lower, a), "hi")
    IO.print("map: All terms tested")
  }

Tests._10.string_to_upper(string_to_upper: String -> String): IO<Unit>
  IO {
    Assert.string("string_to_upper c", string_to_upper(c), "TEXT")
    IO.print("string_to_upper: All terms tested")
  }

Tests._10.to_bits(to_bits: String -> Bits): IO<Unit>
  IO {
    Assert.bits("to_bits a", to_bits(a), Bits.reverse(Bits.read("00000000010010010000000001001000")))
    Assert.bits("to_bits a", to_bits(b), Bits.reverse(Bits.read("00000000011011110000000001101100000000000110110000000000011001010000000001001000")))
    Assert.bits("to_bits a", to_bits(c), Bits.reverse(Bits.read("0000000001110100000000000111100000000000011001010000000001110100")))
    IO.print("to_bits: All terms tested")
  }

Tests._10.stringequal(stringequal: String -> String -> Bool): IO<Unit>
  IO {
    Assert.bool("stringequal a a", stringequal(a, a), true)
    Assert.bool("stringequal a b", stringequal(a, b), false)
    Assert.bool("stringequal b c", stringequal(b, c), false)
    IO.print("stringequal: All terms tested")
  }

Tests._10.is_nat(is_nat: String -> Bool): IO<Unit>
  IO {
    Assert.bool("is_nat a", is_nat(a), false)
    Assert.bool("is_nat b", is_nat(b), false)
    Assert.bool("is_nat 1234", is_nat("1234"), true)
    Assert.bool("is_nat ", is_nat(""), false)
    IO.print("is_nat: All terms tested")
  }

Tests._10.split(split: String -> String -> List<String>): IO<Unit>
  IO {
    Assert.list<String>(Assert.string.funcs, "split rei de roma \"de\"", split("rei de roma", "de"), ["rei ", " roma"]) 
    Assert.list<String>(Assert.string.funcs, "split b \"l\"", split(b, "l"), ["He", "", "o"]) 
    Assert.list<String>(Assert.string.funcs, "split c \"e\"", split(c, "e"), ["t", "xt"]) 
    IO.print("split: All terms tested")
  }

Tests._10.take_while(take_while: (Char -> Bool) -> String -> String): IO<Unit>
  IO {
    Assert.string("take_while is_upper a", take_while(Char.is_upper, a), "HI")
    Assert.string("take_while is_equal('t'), c", take_while(Char.eql('t'), c), "t")
    IO.print("take_while: All terms tested")
  }


Tests._10.find(find: String -> Char -> Maybe<Nat>): IO<Unit>
  IO {
    Assert.maybe<Nat>(Assert.nat.funcs, "find a 'H'", find(a, 'H'), Maybe.some<Nat>(0)) 
    Assert.maybe<Nat>(Assert.nat.funcs, "find b 'l'", find(b, 'l'), Maybe.some<Nat>(2))
    Assert.maybe<Nat>(Assert.nat.funcs, "find c 'x'", find(c, 'x'), Maybe.some<Nat>(2)) 
    Assert.maybe<Nat>(Assert.nat.funcs, "find c 'z'", find(c, 'z'), Maybe.none<Nat>) 
    IO.print("find: All terms tested")
  }


Tests._10.flatten(flatten: List<String> -> String): IO<Unit>
  IO {
    Assert.string("flatten is_upper a", flatten([a, b, c]), "HIHellotext")
    IO.print("flatten: All terms tested")
  }

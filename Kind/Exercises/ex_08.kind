// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none<A>
    cons: Maybe.some<A>(xs.head)
  }

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: []
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: Nat.zero
    cons: Nat.succ(length<A>(xs.tail))
  }

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none<A>
    cons: case xs.tail {
      nil: Maybe.some<A>(xs.head)
      cons: last<A>(xs.tail)
    }
  }

append<A: Type>(xs: List<A>, a: A): List<A>
  case xs {
    nil: [a]
    cons: List.cons<A>(xs.head, append<A>(xs.tail, a))
  }

init.go<A: Type>(xs: List<A>, acum: List<A>): List<A>
  case xs {
    nil: acum
    cons: case xs.tail {
      nil: acum
      cons: init.go<A>(xs.tail, append<A>(acum, xs.head))
    }
  }

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  init.go<A>(xs, List.nil<A>)

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs ys {
    cons nil: xs
    nil cons: ys
    cons cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys))
  } default []

// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: xs
    succ: case xs {
      nil: []
      cons: drop<A>(n.pred, xs.tail)
    }
  }

take.go<A: Type>(n: Nat, xs: List<A>, acum: List<A>): List<A>
  case n {
    zero: acum
    succ: case xs {
      nil: acum
      cons: take.go<A>(n.pred, xs.tail, append<A>(acum, xs.head))
    }
  }
// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
  take.go<A>(n, xs, [])


// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: []
    cons: List.cons<B>(fn(xs.head), map<A, B>(fn, xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil: new_list
    cons: reverse.go<A>(List.cons<A>(old_list.head, new_list), old_list.tail)
  }


ex_08: _
  let a = [2, 3, 4, 7, 5]
  let b = [7, 8, 9, 10, 12]
  let c = []
  // tail!(a)
  // length!(a)
  // List.show!(Nat.show, concat!(a, b))
  // List.show!(Nat.show, map!!(Nat.succ, b))
  // List.show!(Nat.show, reverse!(b))
  List.show!(Nat.show, init<Nat>(b))
// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
  case a {
    zero: Nat.zero
    succ: Nat.succ(Nat.succ(dbl(a.pred)))
  }

// Addition
add(a: Nat, b: Nat): Nat
  case a b {
    succ zero: a
    zero succ: b
    succ succ: add(a.pred, Nat.succ(b))
  } default Nat.zero

// Multiplication
mul(a: Nat, b: Nat): Nat
  case a b {
    succ succ: add(mul(a, b.pred), a)
  } default Nat.zero

// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
  case a b {
    succ zero: a
    zero succ: Nat.zero
    succ succ: sub(a.pred, b.pred)
  } default Nat.zero

// Factorial
// 4! = 24
// f(0) = 1
// f(x) = x * f(x-1)
fac(a: Nat): Nat 
  case a {
    zero: Nat.succ(Nat.zero)
    succ: mul(a, fac(a.pred))
  } default Nat.zero

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a b {
    zero zero: true
    succ succ: eql(a.pred, b.pred)
  } default false

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a b {
    succ zero: true
    succ succ: gtn(a.pred, b.pred)
  } default false

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  case a b {
    zero succ: true
    succ succ: ltn(a.pred, b.pred)
  } default false

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1
min(a: Nat, b: Nat): Nat // if A < B then A else B
  case ltn(a, b) {
    true: a
    false: b
  }

// Maximum
// max(2, 3) = 3
// max(4, 1) = 4
max(a: Nat, b: Nat): Nat // if A > B then A else B
  case gtn(a, b) {
    true: a
    false: b
  }


// Divides a number by two
// 2 / 2 = 1
// 5 / 2 = 2
// 1 / 2 = 0
hlf(a: Nat): Nat
  case ltn(a, 2) {
    true: Nat.zero
    false: Nat.succ(hlf(sub(a, 2)))
  }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  case ltn(a, b) {
    true: Nat.zero
    false: case b {
      zero: Nat.zero
      succ: Nat.succ(div(sub(a, b), b))
    }
  }


ex_04: _
  // dbl(4)
  // add(3, 1)
  // sub(0, 0)
  // mul(4, 1)
  // fac(4)
  // eql(5, 5)
  // gtn(2, 2)
  // ltn(1, 2)
  // min(5, 2)
  // max(5, 10)
  // hlf(0)
  div(45, 0)
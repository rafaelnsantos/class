// Integer Exercises

// Exercises:
// Increments an Integer
// Inte.from_nat(false, 1)     = +0
// Inte.from_nat(false, 2)     = -1
// Inte.from_nat(true,  2)     = +3
inc(a: Inte): Inte  
  case a {
    neg: case a.num {
      one: Inte.pos(Pos.zero)
      pred: Inte.neg(a.num.succ)
    }
    pos: Inte.pos(Pos.succ(a.num))
  }

// Decrements an Integer
// Inte.from_nat(false, 1) = -2
// Inte.from_nat(true,  2) = +1
// Inte.from_nat(true,  0) = -1
dec(a: Inte): Inte
  case a {
    neg: Inte.neg(Neg.pred(a.num))
    pos: case a.num {
      zero: Inte.neg(Neg.one)
      succ: Inte.pos(a.num.pred)
    }
  }

// Doubles an Integer
// Inte.from_nat(false, 4) = -8
// Inte.from_nat(false, 1) = -2
// Inte.from_nat(true,  2) = +4
dbl.go(a: Inte): Inte
  let apos = Inte.to_pos(a)

  open apos
  case apos.num {
    zero: apos
    succ: inc(inc(dbl(dec(apos))))
  } default log("unreachable") apos

dbl(a: Inte): Inte 
  let dbl_pos = dbl.go(a)

  case a {
    neg: Inte.to_neg(dbl_pos)
    pos: dbl_pos
  }
// Adds two Integers
// Inte.from_nat(false, 4) + Inte.from_nat(false, 2) = -6
// Inte.from_nat(false, 4) + Inte.from_nat(true,  2) = -2
add(a: Inte, b: Inte): Inte
  case a b {
    pos pos: case a.num b.num {
      zero zero: Inte.from_nat(true, 0)
      zero succ: b
      succ zero: a
      succ succ: add(inc(a), dec(b))
    }
    neg neg: case a.num b.num {
      one one: Inte.from_nat(false, 2)
      one pred: dec(b)
      pred one: dec(a)
      pred pred: add(dec(a), inc(b))
    }
    pos neg: case a.num b.num {
      zero one: b
      zero pred: b
      succ one: dec(a)
      succ pred: add(dec(a), inc(b))
    }
    neg pos: case a.num b.num {
      one zero: a
      one succ: dec(b)
      pred zero: a
      pred succ: add(inc(a), dec(b))
    }
  }

// Multiplies two numbers
// Inte.from_nat(false, 2) * Inte.from_nat(true, 3)  = -6
// Inte.from_nat(false, 4) * Inte.from_nat(false, 5) = +20
mul.go(a: Inte, b: Inte): Inte
  let apos = Inte.to_pos(a)
  let bpos = Inte.to_pos(b)

  open apos
  open bpos
  case apos.num bpos.num {
    succ succ: add(mul(apos, Inte.pos(bpos.num.pred)), apos)
  } default Inte.from_nat(true, 0)


mul(a: Inte, b: Inte): Inte
  let mul_abs = mul.go(a, b)

  case a b {
    pos pos: mul_abs
    neg neg: mul_abs
  } default Inte.to_neg(mul_abs)

// Subtracts two Interger numbers
// Inte.from_nat(false, 6) - Inte.from_nat(false, 6) = +0
// Inte.from_nat(false, 4) - Inte.from_nat(false, 6) = +2
sub(a: Inte, b: Inte): Inte
  case b {
    neg: add(a, Inte.to_pos(b))
    pos: add(a, Inte.to_neg(b))
  }

// Equal
eql(a: Inte, b: Inte): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a b {
    pos pos: case a.num b.num {
      zero zero: true
      succ succ: eql(dec(a), dec(b))
    } default false
    neg neg: case a.num b.num {
      one one: true
      pred pred: eql(inc(a), inc(b))
    } default false
  } default false


// Greater than
// Inte.from_nat(false, 2) > Inte.from_nat(false, 5) = True
// Inte.from_nat(false, 5) > Inte.from_nat(false, 1) = False
// Inte.from_nat(true,  0) > Inte.from_nat(false, 2) = True
gtn(a: Inte, b: Inte): Bool // if A > B == True else false
  case a b {
    // Inte.from_nat(false, 2) > Inte.from_nat(true,  0) = False
    neg pos: false
    pos neg: true
    pos pos: case a.num b.num {
      succ zero: true
      succ succ: gtn(dec(a), dec(b))
    } default false
    neg neg: case a.num b.num {
      pred pred: gtn(inc(a), inc(b))
      one pred: true
    } default false
  }

// Lower than
// Inte.from_nat(false, 1) < Inte.from_nat(true,  0) = True
// Inte.from_nat(true,  0) < Inte.from_nat(false, 1) = False
ltn(a: Inte, b: Inte): Bool // if A > B == False else true
  case a b {
    neg pos: true
    pos neg: false
    pos pos: case a.num b.num {
      zero succ: true
      succ succ: ltn(dec(a), dec(b))
    } default false
    neg neg: case a.num b.num {
      pred pred: ltn(inc(a), inc(b))
      pred one: true
    } default false
  }

minMax(a: Inte, b: Inte): Pair<Inte, Inte>
  if gtn(a, b) then {b, a} else {a, b}

// Minimum
// min(Inte.from_nat(false, 1), Inte.from_nat(true,  0)  = -1
// min(Inte.from_nat(false, 1), Inte.from_nat(false, 3)) = -3
min(a: Inte, b: Inte): Inte // if A < B then A else B
  case ltn(a, b) {
    true: a
    false: b
  }
  
// Maximum
// max(Inte.from_nat(false, 1), Inte.from_nat(true,  0)) = +0
// max(Inte.from_nat(false, 1), Inte.from_nat(false, 3)) = -1
max(a: Inte, b: Inte): Inte // if A > B then A else B
  case gtn(a, b) {
    true: a
    false: b
  }

// Half
// Divides a number by two
// Inte.from_nat(false, 4) = -2
// Inte.from_nat(false, 1) = +0
// Inte.from_nat(true,  6) = +3
hlf.go(a: Inte): Inte
  let apos = Inte.to_pos(a)
  let p2 = Inte.from_nat(true, 2)

  case ltn(apos, p2) {
    true: Inte.from_nat(true, 0)
    false: inc(hlf(sub(apos, p2)))
  }

hlf(a: Inte): Inte
  let hlf_abs = hlf.go(a)

  case a {
    neg: Inte.to_neg(hlf_abs)
    pos: hlf_abs
  }

// Division
// Inte.from_nat(true,  2)  / Inte.from_nat(true,  2)  = +1
// Inte.from_nat(false, 8)  / Inte.from_nat(true,  4)  = -2
// Inte.from_nat(false, 11) / Inte.from_nat(false, 5)  = +2
// Inte.from_nat(true,  10) / Inte.from_nat(false, 12) = +0
div.go(a: Inte, b: Inte): Inte
  let apos = Inte.to_pos(a)
  let bpos = Inte.to_pos(b)

  case ltn(apos, bpos) {
    true: Inte.from_nat(true, 0)
    false: inc(div(sub(apos, bpos), bpos))
  }

div(a: Inte, b: Inte): Inte 
  let res_abs = div.go(a, b)

  case a b {
    pos pos: res_abs
    neg neg: res_abs
  } default Inte.to_neg(res_abs)

ex_06: _
  Tests._06(inc, dec, dbl, add, mul, sub, eql, gtn, ltn, min, max, hlf, div)
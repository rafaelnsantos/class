ListMap.eql<A: Type>(fn: A -> A -> Bool, a: ListMap<A>, b: ListMap<A>): Bool
  case a b {
    empty empty: true
    cons cons: case Nat.eql(a.head@fst, b.head@fst) && fn(a.head@snd, b.head@snd) {
      true: ListMap.eql<A>(fn, a.tail, b.tail)
      false: false
    }
  } default false

ListMap.how.go<A: Type>(fn: A -> String, lm: ListMap<A>): String
  case lm {
    empty: ""
    cons: "{" | Nat.show(lm.head@fst) | "," | fn(lm.head@snd) | "}"  | case lm.tail {
      empty: ""
      cons: ", "
    } | show.go<A>(fn, lm.tail)
  }

// Converts the ListMap to a String
ListMap.show<A: Type>(fn: A -> String, lm: ListMap<A>): String
  "[" | show.go<A>(fn, lm) | "]"

Assert.listmap<A: Type>(
  listmap_functions: Assert.func<A>
  name: String
  result: ListMap<A>
  expected: ListMap<A>
): IO<Unit>
  let { fst, snd } = listmap_functions
  let eql  = ListMap.eql<A>(fst)
  let show = ListMap.show<A>(snd)
  Assert<ListMap<A>>({ eql, show }, expected, result, name)